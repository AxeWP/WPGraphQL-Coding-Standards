<?xml version="1.0"?>
<ruleset xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="WPGraphQL Minimum Coding Standard" xsi:noNamespaceSchemaLocation="https://raw.githubusercontent.com/squizlabs/PHP_CodeSniffer/master/phpcs.xsd">
	<description>WPGraphQL Minimum Coding Standard</description>

	<!-- The rules below are the changes from between the original sniff or parent ruleset, and what should be applied for this Standard. -->

	<rule ref="PHPCompatibilityWP">
		<include-pattern>*\.php$</include-pattern>
	</rule>

	<!--
		Load WordPress VIP Go standards
		see: https://docs.wpvip.com/technical-references/vip-code-analysis-bot/phpcs-report/
	-->
	<rule ref="WordPress-VIP-Go" />

	<rule ref="WordPress">
		<!-- Definitely should not be added back -->
		<exclude name="Universal.Arrays.DisallowShortArraySyntax"/>
		<exclude name="Universal.Operators.DisallowShortTernary.Found"/>
		<exclude name="WordPress.Files.FileName"/>
		<exclude name="WordPress.NamingConventions.ValidVariableName"/>

		<!-- Should probably not be added back -->
		<exclude name="PHPCompatibility.Keywords.ForbiddenNamesAsDeclared.objectFound"/>
		<exclude name="WordPress.NamingConventions.ValidHookName.UseUnderscores"/>

		<!-- Added back in WPGraphQL-Strict -->
		<exclude name="Generic.CodeAnalysis.UnusedFunctionParameter" />
		<exclude name="PEAR.Functions.FunctionCallSignature.CloseBracketLine"/>
		<exclude name="PEAR.Functions.FunctionCallSignature.ContentAfterOpenBracket"/>
		<exclude name="PEAR.Functions.FunctionCallSignature.MultipleArguments"/>
		<exclude name="WordPress.WP.Capabilities.Undetermined" />

		<!-- This would be a breaking change to fix in Core -->
		<exclude name="WordPress.NamingConventions.ValidFunctionName.MethodNameInvalid"/>
	</rule>

	<!-- Tests for inline documentation of code -->
	<rule ref="WordPress-Docs">
		<exclude name="Generic.Commenting.DocComment.MissingShort"/>

		<!-- Added back in WPGraphQL-Docs -->
		<exclude name="Squiz.Commenting"/>
	</rule>

	<!-- Enforce short array syntax -->
	<rule ref="Generic.Arrays.DisallowLongArraySyntax"/>

	<!--
		Slevomat sniffs
		See: https://github.com/slevomat/coding-standard/tree/master#alphabetical-list-of-sniffs
	-->
	<rule ref="SlevomatCodingStandard.Classes.ClassConstantVisibility" />
	<rule ref="SlevomatCodingStandard.Classes.DisallowConstructorPropertyPromotion" />
	<rule ref="SlevomatCodingStandard.Classes.DisallowLateStaticBindingForConstants" />
	<rule ref="SlevomatCodingStandard.Classes.DisallowMultiConstantDefinition" />
	<rule ref="SlevomatCodingStandard.Classes.DisallowMultiPropertyDefinition" />
	<rule ref="SlevomatCodingStandard.Classes.DisallowStringExpressionPropertyFetch" />
	<rule ref="SlevomatCodingStandard.Classes.UselessLateStaticBinding" />

	<rule ref="SlevomatCodingStandard.ControlStructures.UselessTernaryOperator" />

	<rule ref="SlevomatCodingStandard.Functions.StaticClosure" />
	<rule ref="SlevomatCodingStandard.Functions.UnusedInheritedVariablePassedToClosure" />
	<rule ref="SlevomatCodingStandard.Functions.UselessParameterDefaultValue" />

	<rule ref="SlevomatCodingStandard.Namespaces.FullyQualifiedClassNameInAnnotation"/>
	<rule ref="SlevomatCodingStandard.Namespaces.UseDoesNotStartWithBackslash" />

	<rule ref="SlevomatCodingStandard.PHP.OptimizedFunctionsWithoutUnpacking" />
	<rule ref="SlevomatCodingStandard.PHP.TypeCast" />

	<rule ref="SlevomatCodingStandard.Variables.DuplicateAssignmentToVariable" />

</ruleset>
